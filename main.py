# import time
# from imapclient import IMAPClient
# from Accuracy import vectorizer, model  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
# from GmailConnect import connect_imap, fetch_latest_email  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail
# from Popup import create_gui  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
# if model and vectorizer:
#     print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Vectorizer ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
# else:
#     print("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Accuracy.py")
#     exit()

# def predict_spam(email_text):
#     """‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
#     X_new = vectorizer.transform([email_text])
#     prediction = model.predict(X_new)[0]  # 1 = Spam, 0 = Not Spam
#     return prediction

# def check_email(mail):
#     """‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
#     email_data = fetch_latest_email(mail)  # ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
#     if not email_data:
#         return
    
#     email_body = email_data.get("body", "")
#     email_subject = email_data.get("subject", "")
    
#     if email_body:
#         is_spam = predict_spam(email_body)
#         if is_spam:
#             print("‚ùå ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πÅ‡∏õ‡∏°!")
#             print("üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:", email_subject)
#             print("üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):", email_body[:500])  # ‡πÅ‡∏™‡∏î‡∏á 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
#             create_gui()  # ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
#         else:
#             print("‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏Å‡∏ï‡∏¥")
#     else:
#         print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

# def listen_for_new_emails():
#     """‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤"""
#     with IMAPClient('imap.gmail.com') as client:
#         client.login('mindstory483@gmail.com', 'ccccccccx483')
#         client.select_folder('INBOX')

#         print("[‡∏£‡∏∞‡∏ö‡∏ö] ‡∏£‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤...")
#         client.idle()

#         while True:
#             try:
#                 responses = client.idle_check(timeout=60)  # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà
#                 if responses:
#                     check_email(client)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
#             except Exception as e:
#                 print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
#                 break

# if __name__ == "__main__":
#     listen_for_new_emails()

# import time
# import pickle
# from GmailConnect import connect_imap, fetch_latest_email  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail
# from Popup import create_gui  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# # --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å updated_data.csv ---
# with open("spam_model.pkl", "rb") as model_file:
#     model, vectorizer = pickle.load(model_file)

# print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å updated_data.csv ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# def predict_spam(email_text):
#     """‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
#     X_new = vectorizer.transform([email_text])
#     prediction = model.predict(X_new)[0]  # 1 = Spam, 0 = Not Spam
#     return prediction

# def check_email():
#     """‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
#     mail = connect_imap()  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail
#     if not mail:
#         print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail ‡πÑ‡∏î‡πâ!")
#         return
    
#     email_data = fetch_latest_email(mail)  # ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
#     email_body = email_data.get("body", "")
#     email_subject = email_data.get("subject", "")
    
#     if email_body:
#         is_spam = predict_spam(email_body)
#         if is_spam:
#             print("‚ùå ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πÅ‡∏õ‡∏°!")
#             print("üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:", email_subject)
#             print("üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):", email_body[:500])  # ‡πÅ‡∏™‡∏î‡∏á 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
#             create_gui()  # ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
#         else:
#             print("‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏Å‡∏ï‡∏¥")
#     else:
#         print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•")

# def auto_check():
#     """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ"""
#     while True:
#         print("\n[‡∏£‡∏∞‡∏ö‡∏ö] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà...")
#         check_email()
#         time.sleep(300)  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡∏°‡πà

# if __name__ == "__main__":
#     auto_check()

import time
import pickle
import imaplib
import email
from GmailConnect import connect_imap  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail
from Popup import create_gui  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å updated_data.csv ---
with open("spam_model.pkl", "rb") as model_file:
    model, vectorizer = pickle.load(model_file)

print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å updated_data.csv ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

def predict_spam(email_text):
    """‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    X_new = vectorizer.transform([email_text])
    prediction = model.predict(X_new)[0]  # 1 = Spam, 0 = Not Spam
    return prediction

def fetch_new_email(mail):
    """‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    mail.select("inbox")  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤
    result, data = mail.search(None, "UNSEEN")  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
    
    if result == "OK" and data[0]:
        latest_email_id = data[0].split()[-1]  # ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        result, msg_data = mail.fetch(latest_email_id, "(RFC822)")  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        if result == "OK":
            raw_email = msg_data[0][1]  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏•‡∏î‡∏¥‡∏ö
            msg = email.message_from_bytes(raw_email)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô object
            
            subject = msg["subject"] if msg["subject"] else "(No Subject)"
            body = ""

            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
            else:
                body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")

            return {"subject": subject, "body": body}

    return None  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà

def listen_for_new_email():
    """‡πÉ‡∏ä‡πâ IMAP IDLE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
    mail = connect_imap()  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail
    if not mail:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail ‡πÑ‡∏î‡πâ!")
        return
    
    print("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà... (IMAP IDLE)")

    while True:
        mail.select("inbox")
        mail.send(b"IDLE\r\n")  # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        time.sleep(1)  # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

        email_data = fetch_new_email(mail)  # ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà
        if email_data:
            email_body = email_data["body"]
            email_subject = email_data["subject"]
            
            is_spam = predict_spam(email_body)
            if is_spam:
                print("‚ùå ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πÅ‡∏õ‡∏°!")
                print("üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:", email_subject)
                print("üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):", email_body[:500])  # ‡πÅ‡∏™‡∏î‡∏á 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
                create_gui()  # ‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            else:
                print("‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏Å‡∏ï‡∏¥:", email_subject)

if __name__ == "__main__":
    listen_for_new_email()
