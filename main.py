import pandas as pd
import pickle
import time
import imaplib
import email
from GmailConnect import connect_imap
from Popup import create_gui

# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
# -----------------------------
with open("spam_model.pkl", "rb") as model_file:
    model, vectorizer = pickle.load(model_file)

print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")


def predict_spam(email_text):
    X_new = vectorizer.transform([email_text])
    prediction = model.predict(X_new)[0]
    return prediction


# -----------------------------
# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö updated_data.csv ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß
# -----------------------------
def test_model_with_updated_data():
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å updated_data.csv")

    try:
        df = pd.read_csv("updated_data.csv")
        print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå updated_data.csv ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô label
        print("\nüßÆ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô label ‡πÉ‡∏ô updated_data.csv:")
        print(df["spam"].value_counts())

        if df[df["spam"] == 0].shape[0] < 3 or df[df["spam"] == 1].shape[0] < 3:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• label=0 ‡∏´‡∏£‡∏∑‡∏≠ label=1 ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°")
            return

        non_spam = df[df["spam"] == 0].sample(3)
        spam = df[df["spam"] == 1].sample(3)

        print("\nüìß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Non-Spam:")
        for idx, row in non_spam.iterrows():
            text = row["text"]
            pred = predict_spam(text)
            print(f"üü¢ Row: {idx}")
            print(f"‚úÖ [label=0] ‚Üí {'Spam ‚ùå' if pred == 1 else 'Not Spam ‚úÖ'}")
            print(f"   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text[:100]}...\n")

        print("üìß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Spam:")
        for idx, row in spam.iterrows():
            text = row["text"]
            pred = predict_spam(text)
            print(f"üî¥ Row: {idx}")
            print(f"‚ùå [label=1] ‚Üí {'Spam ‚úÖ' if pred == 1 else 'Not Spam ‚ùå'}")
            print(f"   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text[:100]}...\n")

    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå updated_data.csv")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å Gmail (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°)
# -----------------------------
def fetch_new_email(mail):
    mail.select("inbox")
    result, data = mail.search(None, "UNSEEN")

    if result == "OK" and data[0]:
        latest_email_id = data[0].split()[-1]
        result, msg_data = mail.fetch(latest_email_id, "(RFC822)")

        if result == "OK":
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)
            subject = msg["subject"] if msg["subject"] else "(No Subject)"
            body = ""

            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
            else:
                body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")

            return {"subject": subject, "body": body}

    return None


def listen_for_new_email():
    mail = connect_imap()
    if not mail:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gmail ‡πÑ‡∏î‡πâ!")
        return

    print("üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà... (IMAP IDLE)")

    while True:
        mail.select("inbox")
        mail.send(b"IDLE\r\n")
        time.sleep(1)

        email_data = fetch_new_email(mail)
        if email_data:
            email_body = email_data["body"]
            email_subject = email_data["subject"]

            is_spam = predict_spam(email_body)
            if is_spam:
                print("‚ùå ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πÅ‡∏õ‡∏°!")
                print("üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:", email_subject)
                print("üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):", email_body[:500])
                create_gui()
            else:
                print("‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏Å‡∏ï‡∏¥:", email_subject)


# -----------------------------
# Main
# -----------------------------
if __name__ == "__main__":
    # test_model_with_updated_data()     # ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model ‡∏û‡∏£‡πâ‡∏≠‡∏° row
    listen_for_new_email()          # üîÑ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á

